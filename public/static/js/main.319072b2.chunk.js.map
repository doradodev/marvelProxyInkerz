{"version":3,"sources":["assets/marvel-logo.png","pages/components/home-layout.js","utils/api.js","pages/containers/home.js","header/component/header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomeLayout","props","react_default","a","createElement","className","children","api","search","limit","offset","fetch","query","json","data","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePagination","event","state","setState","characters","loader","currentPage","callToApi","handleSearch","handleSearchChange","target","value","handleKeyPress","key","totalPages","API","getCharacters","total","Math","ceil","result","lib","name","s","label","onChange","onKeyPress","onClick","map","character","id","m","header","reveal","image","img","title","description","activePage","maxButtons","items","onSelect","Component","Header","src","Logo","alt","style","height","App","home_layout","containers_home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4QCUzBC,MARf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,aAChBJ,EAAMK,mCCKEC,SAAA,kJAPSC,EAAQC,EAAOC,2FACbC,MAAM,uDAAuDH,EAAO,UAAUC,EAAM,WAAWC,iBAA7GE,kBACeA,EAAMC,qBAApBC,2BACAA,uHCoGEC,cAnGb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYFI,iBAAmB,SAAAC,GACjB,IAAId,EAAUc,EAASR,EAAKS,MAAMhB,MACrB,IAAVe,IACDd,EAAS,GAEXM,EAAKU,SAAS,CACZC,WAAW,GACXC,QAAQ,EACRC,YAAaL,IAEfR,EAAKc,UAAUpB,IAvBFM,EAyBfe,aAAgB,SAAAP,GACdR,EAAKU,SAAS,CACZC,WAAW,GACXC,QAAQ,EACRC,YAAa,IAEfb,EAAKc,UAAU,IA/BFd,EAiCfgB,mBAAqB,SAAAR,GACnBR,EAAKU,SAAS,CAAClB,OAAQgB,EAAMS,OAAOC,SAlCvBlB,EAqCfmB,eAAiB,SAAAX,GACE,UAAdA,EAAMY,MACPpB,EAAKU,SAAS,CACZC,WAAY,GACZC,QAAQ,EACRC,YAAa,IAEfb,EAAKc,UAAU,KA1CjBd,EAAKS,MAAQ,CACXE,WAAY,GACZnB,OAAQ,GACRE,OAAQ,EACRD,MAAO,GACPmB,QAAQ,EACRC,YAAY,EACZQ,WAAY,GATDrB,iNAgDiBsB,EAAIC,cAAcpB,KAAKM,MAAMjB,OAAQW,KAAKM,MAAMhB,MAAOU,KAAKM,MAAMf,eAAhGS,KAAKM,MAAME,kBACLa,EAASC,KAAKC,KAAKvB,KAAKM,MAAME,WAAWa,MAAQrB,KAAKM,MAAME,WAAWlB,OAC7EU,KAAKO,SAAS,CACZC,WAAYR,KAAKM,MAAME,WAAWgB,OAClCf,QAAQ,EACRS,WAAYG,gLAIA9B,yFACgB4B,EAAIC,cAAcpB,KAAKM,MAAMjB,OAAQW,KAAKM,MAAMhB,MAAOC,UAArFS,KAAKM,MAAME,kBACLa,EAASC,KAAKC,KAAKvB,KAAKM,MAAME,WAAWa,MAAQrB,KAAKM,MAAME,WAAWlB,OAC7EU,KAAKO,SAAS,CACZC,WAAYR,KAAKM,MAAME,WAAWgB,OAClCf,QAAQ,EACRS,WAAYG,wIAKd,OAEEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAA,IAAD,KACE1C,EAAAC,EAAAC,cAACwC,EAAA,MAAD,CAAQC,KAAO,SAASC,EAAG,EAAGC,MAAM,SAASC,SAAU7B,KAAKa,mBAAoBiB,WAAY9B,KAAKgB,iBACjGjC,EAAAC,EAAAC,cAACwC,EAAA,OAAD,CAAQvC,UAAU,SAASyC,EAAG,EAAGI,QAAS/B,KAAKY,cAA/C,WAEF7B,EAAAC,EAAAC,cAACwC,EAAA,IAAD,KACGzB,KAAKM,MAAMG,OAAS1B,EAAAC,EAAAC,cAACwC,EAAA,YAAD,CAAavC,UAAU,QAAQ,KACnDc,KAAKM,MAAME,WAAWwB,IAAI,SAAAC,GACzB,OACElD,EAAAC,EAAAC,cAACwC,EAAA,IAAD,CAAKR,IAAKgB,EAAUC,GAAIC,EAAG,GACzBpD,EAAAC,EAAAC,cAACwC,EAAA,KAAD,CACEW,OAAQrD,EAAAC,EAAAC,cAACwC,EAAA,UAAD,CAAWvC,UAAU,8BAA8BmD,QAAM,EAACC,MAAOL,EAAUM,MACnFC,MAAOP,EAAUP,KACjBxC,UAAU,eACVmD,OAAQtD,EAAAC,EAAAC,cAAA,SAAIgD,EAAUQ,mBAOhC1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXc,KAAKM,MAAMG,OAA0I,KAAjI1B,EAAAC,EAAAC,cAACwC,EAAA,WAAD,CAAYiB,WAAY1C,KAAKM,MAAMI,YAAaiC,WAAY,GAAIC,MAAO5C,KAAKM,MAAMY,WAAY2B,SAAU7C,KAAKI,4BA9F1H0C,8BCMJC,MARf,SAAiBjE,GACf,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,uBACjBH,EAAAC,EAAAC,cAAA,OAAK+D,IAAKC,IAAMC,IAAKD,IAAME,MAAO,CAACC,OAAO,SCajCC,mLAXX,OACEtE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACqE,EAAD,KACEvE,EAAAC,EAAAC,cAACsE,EAAD,eANUT,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.319072b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marvel-logo.0bdb5245.png\";","import React from 'react'\n\nfunction HomeLayout(props) {\n  return(\n    <section className=\"container\">\n      {props.children}\n    </section>\n  )\n}\n\nexport default HomeLayout","\n\nclass Api {\n    async getCharacters(search, limit, offset){\n      const query = await fetch('http://localhost:3001/api/characters?nameStartsWith='+search+'&limit='+limit+'&offset='+offset);\n      const  data  = await query.json();\n      return data\n    }\n}\n\nexport default new Api()","import React, { Component } from 'react'\nimport './home.css'\nimport API from '../../utils/api'\nimport { Button, Card, CardTitle, Col, Input, Pagination, ProgressBar, Row } from 'react-materialize'\n\nclass Home extends Component {\n\n  constructor () {\n    super()\n    this.state = {\n      characters: [],\n      search: '',\n      offset: 0,\n      limit: 12,\n      loader: true,\n      currentPage:1,\n      totalPages: 0\n    }\n  }\n\n  handlePagination = event => {\n    let offset = (event) * this.state.limit;\n    if(event === 1){\n      offset = 0;\n    }\n    this.setState({\n      characters:[],\n      loader: true,\n      currentPage: event\n    })\n    this.callToApi(offset);\n  }\n  handleSearch  = event =>  {\n    this.setState({\n      characters:[],\n      loader: true,\n      currentPage: 1\n    })\n    this.callToApi(0);\n  }\n  handleSearchChange = event => {\n    this.setState({search: event.target.value})\n  }\n\n  handleKeyPress = event => {\n    if(event.key === 'Enter') {\n      this.setState({\n        characters: [],\n        loader: true,\n        currentPage: 1\n      })\n      this.callToApi(0);\n    }\n  }\n  async componentDidMount () {\n    this.state.characters = await API.getCharacters(this.state.search, this.state.limit, this.state.offset)\n    const total =  Math.ceil(this.state.characters.total / this.state.characters.limit);\n    this.setState({\n      characters: this.state.characters.result,\n      loader: false,\n      totalPages: total\n    })\n  }\n\n  async callToApi(offset){\n    this.state.characters = await API.getCharacters(this.state.search, this.state.limit, offset)\n    const total =  Math.ceil(this.state.characters.total / this.state.characters.limit);\n    this.setState({\n      characters: this.state.characters.result,\n      loader: false,\n      totalPages: total\n    })\n  }\n\n  render () {\n    return (\n\n      <div>\n        <Row>\n          <Input  name = \"search\" s={9} label=\"SEARCH\" onChange={this.handleSearchChange} onKeyPress={this.handleKeyPress}/>\n          <Button className='Button' s={3} onClick={this.handleSearch}>Search</Button>\n        </Row>\n        <Row>\n          {this.state.loader ? <ProgressBar className=\"red\"/>:null}\n          {this.state.characters.map(character => {\n            return (\n              <Col key={character.id} m={6}>\n                <Card\n                  header={<CardTitle className=\"img-responsive center-align\" reveal image={character.img}/>}\n                  title={character.name}\n                  className=\"center-align\"\n                  reveal={<p>{character.description}</p>}>\n                </Card>\n              </Col>\n            )\n          })\n          }\n        </Row>\n        <div className=\"center-align\">\n          {!this.state.loader ? <Pagination activePage={this.state.currentPage} maxButtons={10} items={this.state.totalPages} onSelect={this.handlePagination}/>:null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home","import React from 'react'\nimport Logo from '../../assets/marvel-logo.png'\n\nfunction Header (props) {\n  return(\n    <section className=\"Header center-align\">\n      <img src={Logo} alt={Logo} style={{height:235}}/>\n    </section>\n  )\n}\n\nexport default Header","import React, { Component } from 'react';\nimport './App.css';\nimport HomeLayout from './pages/components/home-layout'\nimport Home from './pages/containers/home'\nimport Header from './header/component/header'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <Header/>\n      <HomeLayout>\n        <Home/>\n      </HomeLayout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}